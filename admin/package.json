{
  "name": "sms-at-command-system",
  "version": "1.0.0",
  "description": "Complete SMS AT Command System with rate limiting and virtual phone for development",
  "main": "server/index.js",
  "scripts": {
    "start": "node server/index.js",
    "dev": "NODE_ENV=development nodemon server/index.js",
    "prod": "NODE_ENV=production node server/index.js",
    "bridge": "node bridge/index.js",
    "bridge-dev": "NODE_ENV=development nodemon bridge/index.js",
    "setup": "node scripts/setup.js",
    "db:migrate": "node scripts/migrate.js",
    "db:seed": "node scripts/seed.js",
    "test": "jest",
    "lint": "eslint server/ bridge/ --ext .js",
    "build": "npm run build:admin",
    "build:admin": "cd admin && npm run build",
    "install:all": "npm install && cd admin && npm install && cd ../bridge && npm install",
    "start:all": "concurrently \"npm run dev\" \"npm run bridge-dev\"",
    "restart": "pm2 restart ecosystem.config.js",
    "logs": "pm2 logs",
    "stop": "pm2 stop ecosystem.config.js"
  },
  "keywords": [
    "sms",
    "at-commands",
    "modem",
    "rate-limiting",
    "virtual-phone",
    "websocket"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "ws": "^8.14.2",
    "mysql2": "^3.6.3",
    "dotenv": "^16.3.1",
    "helmet": "^7.1.0",
    "express-rate-limit": "^7.1.5",
    "compression": "^1.7.4",
    "morgan": "^1.10.0",
    "uuid": "^9.0.1",
    "joi": "^17.11.0",
    "bcrypt": "^5.1.1",
    "jsonwebtoken": "^9.0.2",
    "node-cron": "^3.0.2",
    "winston": "^3.11.0",
    "multer": "^1.4.5",
    "csv-parser": "^3.0.0",
    "papaparse": "^5.4.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "supertest": "^6.3.3",
    "eslint": "^8.53.0",
    "concurrently": "^8.2.2",
    "pm2": "^5.3.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yourcompany/sms-at-command-system.git"
  },
  "bugs": {
    "url": "https://github.com/yourcompany/sms-at-command-system/issues"
  },
  "homepage": "https://github.com/yourcompany/sms-at-command-system#readme"
}

// bridge/package.json
{
  "name": "sms-bridge",
  "version": "1.0.0",
  "description": "SMS AT Command Bridge for hardware modem communication",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "NODE_ENV=development nodemon index.js",
    "prod": "NODE_ENV=production node index.js",
    "test": "jest",
    "lint": "eslint . --ext .js"
  },
  "dependencies": {
    "ws": "^8.14.2",
    "serialport": "^12.0.0",
    "@serialport/parser-readline": "^12.0.0",
    "dotenv": "^16.3.1",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "eslint": "^8.53.0"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}

// admin/package.json
{
  "name": "sms-admin-panel",
  "version": "1.0.0",
  "description": "Admin panel for SMS AT Command System",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "react-router-dom": "^6.17.0",
    "axios": "^1.6.0",
    "lucide-react": "^0.292.0",
    "@tailwindcss/forms": "^0.5.6",
    "recharts": "^2.8.0",
    "react-hook-form": "^7.47.0",
    "react-query": "^3.39.3",
    "react-toastify": "^9.1.3",
    "date-fns": "^2.30.0",
    "clsx": "^2.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint src --ext .js,.jsx,.ts,.tsx"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "tailwindcss": "^3.3.5",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "typescript": "^5.2.2"
  },
  "proxy": "http://localhost:3000"
}

// ecosystem.config.js (PM2 Configuration)
module.exports = {
  apps: [
    {
      name: 'sms-server',
      script: 'server/index.js',
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G',
      env: {
        NODE_ENV: 'development',
        PORT: 3000
      },
      env_production: {
        NODE_ENV: 'production',
        PORT: 3000
      },
      error_file: './logs/server-error.log',
      out_file: './logs/server-out.log',
      log_file: './logs/server-combined.log',
      time: true
    },
    {
      name: 'sms-bridge',
      script: 'bridge/index.js',
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '512M',
      env: {
        NODE_ENV: 'development'
      },
      env_production: {
        NODE_ENV: 'production'
      },
      error_file: './logs/bridge-error.log',
      out_file: './logs/bridge-out.log',
      log_file: './logs/bridge-combined.log',
      time: true
    }
  ]
};

// scripts/setup.js
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Setting up SMS AT Command System...\n');

// Create necessary directories
const directories = ['logs', 'uploads', 'temp'];
directories.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`‚úÖ Created directory: ${dir}`);
  }
});

// Copy environment file if it doesn't exist
if (!fs.existsSync('.env')) {
  const envExample = `# Copy this to .env and configure your settings
NODE_ENV=development
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=sms_system
PORT=3000
VIRTUAL_PHONE=+1234567890
COM_PORT=COM3
COM_BAUD_RATE=115200
`;
  fs.writeFileSync('.env', envExample);
  console.log('‚úÖ Created .env file (please configure your settings)');
}

// Install dependencies for all components
console.log('\nüì¶ Installing dependencies...');
try {
  execSync('npm install', { stdio: 'inherit' });
  
  if (fs.existsSync('admin')) {
    process.chdir('admin');
    execSync('npm install', { stdio: 'inherit' });
    process.chdir('..');
  }
  
  if (fs.existsSync('bridge')) {
    process.chdir('bridge');
    execSync('npm install', { stdio: 'inherit' });
    process.chdir('..');
  }
  
  console.log('‚úÖ All dependencies installed');
} catch (error) {
  console.error('‚ùå Error installing dependencies:', error.message);
  process.exit(1);
}

console.log('\nüéâ Setup complete!');
console.log('\nNext steps:');
console.log('1. Configure your .env file with database settings');
console.log('2. Create the database and run migrations: npm run db:migrate');
console.log('3. Seed the database with sample data: npm run db:seed');
console.log('4. For development: npm run start:all');
console.log('5. For production: npm run prod');
console.log('\nAdmin panel will be available at: http://localhost:3000');

// tailwind.config.js (for admin)
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
